name: Release

on:
  workflow_dispatch:

  push:
    branches:
      - master

    tags:
      - 'v*'

permissions:
  contents: write
  packages: write

  # helm-release workflow
  pages: write
  id-token: write

jobs:
  github-release:
    name: Create Github Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.meta.outputs.version }}
      is_nightly: ${{ steps.meta.outputs.is_nightly }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - uses: nxtcoder17/actions/metadata@main
        id: meta

      - name: create nightly github release (if applicable)
        shell: bash
        if: ${{ steps.meta.outputs.is_nightly == 'true' }}
        env:
          GH_TOKEN: ${{ github.token }}
          version: ${{steps.meta.outputs.version}}
        run: |+
          echo "ðŸ”– recreating release for nightly tag ${{ steps.meta.outputs.version }}"
          gh release delete ${{steps.meta.outputs.version}} -y --cleanup-tag -R ${{ github.repository }} || echo "cleaned up ${{steps.meta.outputs.version}} tag"
          gh release create "${{steps.meta.outputs.version}}" -R "${{ github.repository }}" --generate-notes --prerelease

      - name: upload kubernetes CRDs to github release
        shell: bash
        env:
          GH_TOKEN: ${{ github.token }}
          version: ${{steps.meta.outputs.version}}
        run: |+
          for file in $(ls config/crd/bases/); do
            cat config/crd/bases/$file >> crds.yml
          done

          opts=("-R" "${{github.repository}}")
          if [ "${{ steps.meta.outputs.is_nightly }}" = "true" ]; then
            opts+=("--clobber")
          fi

          gh release upload "${{ steps.meta.outputs.version }}" ${opts[@]} crds.yml

  build-container-image:
    strategy:
      fail-fast: true
      matrix:
        arch:
          - amd64
          - arm64
        include:
          - arch: amd64
            runner: ubuntu-latest
          - arch: arm64
            runner: ubuntu-24.04-arm

    runs-on: ${{ matrix.runner }}
    name: Build Container Image
    needs:
      - github-release
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - uses: nxtcoder17/actions/setup-docker@main
        with:
          docker_registry: "ghcr.io"
          docker_username: ${{ github.actor }}
          docker_password: ${{ secrets.GITHUB_TOKEN }}

      - name: docker build and push
        env:
          image: "ghcr.io/${{ github.repository }}/controller:${{ needs.github-release.outputs.version }}-${{ matrix.arch }}"
          buildx_cache: "ghcr.io/${{ github.repository }}/controller:__docker__buildx__cache__${{ matrix.arch }}__${{needs.github-release.outputs.version}}"
        run: |+
          docker buildx build -t "$image" \
            --cache-to type=registry,ref="$buildx_cache",mode=max,compression=zstd,compression-level=13,force-compression=true \
            --cache-from type=registry,ref="$buildx_cache" \
            --output=type=image,compression=zstd,force-compression=true,compression-level=13,push=true \
          .

  publish-multiarch-image:
    runs-on: ubuntu-latest
    name: publish-multiarch-image
    needs:
      - github-release
      - build-container-image
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - uses: nxtcoder17/actions/setup-docker@main
        with:
          docker_registry: "ghcr.io"
          docker_username: ${{ github.actor }}
          docker_password: ${{ github.token }}
          qemu: false

      - shell: bash
        env:
          IMAGE: "ghcr.io/${{ github.repository }}/controller"
          tag: "${{ needs.github-release.outputs.version }}"
        run: |+
          docker buildx imagetools create -t $IMAGE:$tag $IMAGE:$tag-amd64 $IMAGE:$tag-arm64

  helmchart-release:
    uses: ./.github/workflows/helm-release.yml
    secrets: inherit
    needs:
      - github-release
      - build-container-image
    with:
      chart_version: ${{ needs.github-release.outputs.version }}
      chart_app_version: ${{ needs.github-release.outputs.version }}
      overwrite_release_assets: ${{ needs.github-release.outputs.is_nightly }}
      charts: |+
        ./helm-chart
      github_release: "${{ needs.github-release.outputs.version }}"
