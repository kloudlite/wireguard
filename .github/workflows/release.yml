name: Release

on:
  workflow_dispatch:

  push:
    branches:
      - master

    tags:
      - 'v*'

permissions:
  contents: write
  packages: write

  # helm-release workflow
  pages: write
  id-token: write

jobs:
  github-release:
    name: Create Github Release
    runs-on: [self-hosted, linux, x64]
    outputs:
      version: ${{ steps.meta.outputs.version }}
      ref_slug: ${{ steps.meta.outputs.ref_slug }}
      default_branch_slug: ${{ steps.meta.outputs.default_branch_slug }}

      is_pre_release: ${{ steps.meta.outputs.is_pre_release }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - uses: nxtcoder17/actions/metadata@main
        id: meta

      - name: create github release
        uses: nxtcoder17/actions/github-release-create@main
        with:
          name: ${{steps.meta.outputs.version}}
          github_token: ${{github.token}}
          pre_release: ${{ steps.meta.outputs.is_pre_release }}

      - name: create unified CRDs file
        shell: bash
        run: |+
          for file in $(ls config/crd/bases/); do
            cat config/crd/bases/$file >> crds.yml
          done

      - name: upload kubernetes CRDs to github release
        uses: nxtcoder17/actions/github-release-upload@main
        with:
          name: ${{steps.meta.outputs.version}}
          github_token: ${{github.token}}
          files: |+
            crds.yml

  build-image:
    strategy:
      fail-fast: true
      matrix:
        include:
          - arch: amd64
            runs-on: [self-hosted, linux, x64]
          - arch: arm64
            runs-on: [self-hosted, linux, ARM64]

    runs-on: ${{ matrix.runner }}
    name: Build Container Image
    needs:
      - github-release
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - uses: nxtcoder17/actions/setup-docker@main
        with:
          docker_registry: "ghcr.io"
          docker_username: ${{ github.actor }}
          docker_password: ${{ secrets.GITHUB_TOKEN }}

      - name: docker build and push
        env:
          image: "ghcr.io/${{ github.repository }}/controller:${{ needs.github-release.outputs.version }}-${{ matrix.arch }}"
          buildx_cache: "ghcr.io/${{ github.repository }}/controller:buildx-cache-${{needs.github-release.outputs.ref_slug}}-${{matrix.arch}}"
          buildx_cache_default: "ghcr.io/${{ github.repository }}/controller:buildx-cache-${{needs.github-release.outputs.default_branch_slug}}-${{matrix.arch}}"
        run: |+
          docker buildx build -t "$image" \
            --cache-to type=registry,ref="$buildx_cache",mode=max,compression=zstd,compression-level=13,force-compression=true \
            --cache-from type=registry,ref="$buildx_cache" \
            --cache-from type=registry,ref="$buildx_cache_default" \
            --output=type=image,compression=zstd,force-compression=true,compression-level=13,push=true \
          .

  publish-multiarch-image:
    runs-on: [self-hosted, linux]
    name: publish-multiarch-image
    needs:
      - github-release
      - build-image
    steps:
      - uses: nxtcoder17/actions/setup-docker@main
        with:
          docker_registry: "ghcr.io"
          docker_username: ${{ github.actor }}
          docker_password: ${{ github.token }}
          qemu: false

      - shell: bash
        env:
          IMAGE: "ghcr.io/${{ github.repository }}/controller"
          tag: "${{ needs.github-release.outputs.version }}"
        run: |+
          docker buildx imagetools create -t $IMAGE:$tag $IMAGE:$tag-amd64 $IMAGE:$tag-arm64

  helmchart-release:
    uses: ./.github/workflows/helm-release.yml
    secrets: inherit
    needs:
      - github-release
      - build-image
    with:
      chart_version: ${{ needs.github-release.outputs.version }}
      chart_app_version: ${{ needs.github-release.outputs.version }}
      overwrite_release_assets: ${{ needs.github-release.outputs.is_pre_release }}
      charts: |+
        ./helm-chart
      github_release: "${{ needs.github-release.outputs.version }}"
